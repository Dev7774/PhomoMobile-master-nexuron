# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
############  USER & FRIENDS  ############
type User
  @model
  @searchable
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: private, provider: iam, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  displayName: String
  faceCount: Int
  primaryFaceId: String
  profilePhotoKey: String
  expoPushToken: String
  photos: [Photo] @hasMany(indexName: "byOwner", fields: ["id"])
}

type Friendship
  @model
  @auth(
    rules: [
      { allow: owner }
      {
        allow: owner
        ownerField: "friendId"
        operations: [read, update, delete]
      }
    ]
  ) {
  id: ID! @primaryKey
  ownerId: ID! @index(name: "byOwner", sortKeyFields: ["friendId"])
  friendId: ID! @index(name: "byFriend", sortKeyFields: ["ownerId"])
  status: String!
  createdAt: AWSDateTime
}

############  SHARED CAMERA ############
type SharedCamera
  @model
  @auth(
    rules: [
      { allow: owner } # creator full rights
      { allow: private, operations: [read], groupsField: "memberIds" }
    ]
  ) {
  id: ID! @primaryKey
  name: String!
  ownerId: ID! @index(name: "byOwner", sortKeyFields: ["createdAt"])
  memberIds: [ID!]!
  createdAt: AWSDateTime!
  photos: [Photo] @hasMany(indexName: "byCamera", fields: ["id"])
  members: [SharedCameraMember] @hasMany(indexName: "byCamera", fields: ["id"])
}

type SharedCameraMember
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: owner, ownerField: "userId", operations: [read, update, delete] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey # <-- new single-column PK
  cameraId: ID! @index(name: "byCamera", sortKeyFields: ["userId"])
  userId: ID! @index(name: "byUser", sortKeyFields: ["cameraId"])
  role: String! # INVITED | MEMBER | ADMIN
  addedAt: AWSDateTime!
}

############  PHOTOS  ############
type Photo
  @model
  @auth(
    rules: [
      { allow: owner } # shooter
      {
        allow: groups
        groupsField: "sharedCameraId"
        operations: [create, read]
      }
      { allow: private, operations: [read] }
      { allow: private, provider: iam, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  ownerId: ID! @index(name: "byOwner", sortKeyFields: ["createdAt"])
  ownerIdentityId: String!
  sharedCameraId: ID @index(name: "byCamera", sortKeyFields: ["createdAt"])
  s3Key: String!
  thumbKey: String
  createdAt: AWSDateTime!
  recipients: [PhotoRecipient] @hasMany(indexName: "byPhoto", fields: ["id"])
}

type PhotoRecipient
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "recipientId"
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "ownerId"
        operations: [create, read, update, delete]
      }
      { allow: private, operations: [create, read, update, delete] }
    ]
  ) {
  id: ID! @primaryKey # single-column PK (uuid)
  photoId: ID! @index(name: "byPhoto", sortKeyFields: ["recipientId"])
  recipientId: ID! 
    @index(name: "byRecipient", sortKeyFields: ["photoId"])
    @index(name: "byRecipientCreated", sortKeyFields: ["createdAt"])
  ownerId: ID!
    @index(name: "byOwner", sortKeyFields: ["recipientId", "createdAt"])
  confidence: Float # face match confidence (0-100)
  method: String # "FACE_RECOGNITION" | "SHARED_CAMERA" | "MANUAL"
  createdAt: AWSDateTime!
}

############  RESPONSE TYPES  ############
type UpdateUserFaceResult {
  success: Boolean!
  faceId: String
  newFaceCount: Int
  message: String
  error: String
}

type FaceProcessingResult {
  facesDetected: Int!
  friendsMatched: Int!
  matches: [FaceMatch!]!
}

type FaceMatch {
  userId: ID!
  confidence: Float!
  boundingBox: BoundingBox!
}

type BoundingBox {
  left: Float!
  top: Float!
  width: Float!
  height: Float!
}

type AcceptInviteResult {
  success: Boolean!
  message: String!
  cameraId: ID!
  cameraName: String!
  role: String!
  inviterName: String
}

type DeleteUserFaceResult {
  success: Boolean!
  message: String
  error: String
}

############  MUTATIONS  ############
type Mutation {
  enrollUserFace(userId: ID!, s3Key: String!): Boolean
    @function(name: "createUserFace-${env}")
  updateUserFace(userId: ID!, s3Key: String!): UpdateUserFaceResult
    @function(name: "updateUserFace-${env}")
  processPhotoFaces(
    photoId: ID!
    s3Key: String!
    ownerId: ID!
    sharedCameraId: ID
  ): FaceProcessingResult @function(name: "detectAndMatchFaces-${env}")
  generateCameraInvite(
    cameraId: ID!
    cameraName: String!
    inviterUserId: ID!
    inviterName: String!
  ): String @function(name: "generateCameraInvite-${env}")
    @auth(rules: [{ allow: private }])
  acceptCameraInvite(
    token: String!
    userId: ID!
  ): AcceptInviteResult @function(name: "acceptCameraInvite-${env}")
    @auth(rules: [
      { allow: private }
      { allow: public, provider: apiKey }
    ])
  deleteUserFace(userId: ID!, identityId: String!): DeleteUserFaceResult
    @function(name: "deleteUserFace-${env}")
}